syntax = "proto3";

package api;

option go_package = "api";
import "github.com/mwitkow/go-proto-validators/validator.proto";

service UserDB {
    //Ping - input: empty, output: returns ok if server is healthy.
    rpc Ping(PingRequest) returns(PingResponse){};
    
    rpc Login(LoginRequest) returns(LoginResponse){};
    rpc LoginJWT(LoginJWTRequest) returns(LoginJWTResponse){};
    //Get - input: an array of user emails, output: returns an array of current user details
    rpc Get(GetRequest) returns(GetResponse){};
    //GetRegex - input: a regex string, output: returns an array of current user details with emails that match the regex pattern
    rpc GetRegex(GetRegexRequest) returns(GetRegexResponse){};
    //GetEmails -  input: none, output: returns all emails in database
    rpc GetEmails(GetEmailsRequest) returns(GetEmailsResponse){};
    //GetRegexEmails -  input: a regex string, output: returns all emails in database that match the regex pattern
    rpc GetRegexEmails(GetRegexEmailsRequest) returns(GetRegexEmailsResponse){};
    //Delete -  input: an array of user email strings to delete, output: none
    rpc Delete(DeleteRequest) returns(DeleteResponse){};

    rpc NewAccount(NewAccountRequest) returns(NewAccountResponse){};
    rpc GetAccount(GetAccountRequest) returns(GetAccountResponse){};
    rpc GetAccountRegex(GetAccountRegexRequest) returns(GetAccountRegexResponse){};
    rpc DeleteAccount(DeleteAccountRequest) returns(DeleteAccountResponse){};
    rpc AddAccountPlan(SetAccountPlanRequest) returns(SetAccountPlanResponse){};
    rpc SetAccountSource(SetAccountSourceRequest) returns(SetAccountSourceResponse){};
    rpc GetAccountNames(GetAccountNamesRequest) returns(GetAccountNamesResponse){};
    rpc GetAccountNamesRegex(GetAccountNamesRegexRequest) returns(GetAccountNamesRegexResponse){};
    
    rpc SetUserAccount(SetUserAccountRequest) returns(SetUserAccountResponse){};
    rpc IncAccountPlanUsage(IncAccountPlanUsageRequest) returns(IncAccountPlanUsageResponse){};
}

message Account {
    string name =1;
    string admin_email =2;
    map<string, string> metadata =3; //optional metadata associated with the user
    Payment payment =4;
    int64 updated_unix =5; //unix timestamp representing last update (optional
}

message Payment {
    string customer_id =1;
    repeated Subscription subscriptions = 2;
}

message Subscription {
    string subscription =1;
    string plan =2;
    string product =3;
    string item =4;
}

//UserDetail is an enhanced view of an User containing a human readable address and the users latest tracking information
message UserDetail {
    string email = 1 [(validator.field) = {regex: "^.{1,225}$"}];
    string name = 2 [(validator.field) = {regex: "^.{1,225}$"}];
    map<string, string> metadata =3; //optional metadata associated with the user
    Account account =4; //optional
    int64 updated_unix =5; //unix timestamp representing last update (optional)
}


message LoginRequest {
   string code =1 [(validator.field) = {regex: "^.{1,225}$"}];
}

message LoginResponse {
    UserDetail user =1;
    string jwt =2;
}

message LoginJWTRequest {
    string jwt =1 [(validator.field) = {regex: "^.{1,225}$"}];
}

message LoginJWTResponse {
    UserDetail user =1;
}

message SetRequest {
    UserDetail user= 1;
}

message SetResponse {
    UserDetail user= 1;
}

message GetEmailsRequest {}

message GetEmailsResponse {
    repeated string emails =1;
}

message GetRegexEmailsRequest {
    string regex =1 [(validator.field) = {regex: "^.{1,225}$"}];
}

message GetRegexEmailsResponse {
    repeated string emails =1;
}

message GetRequest {
    repeated string emails =1;
}

message GetResponse {
    map<string, UserDetail> users= 1;
}

message GetRegexRequest {
    string regex =1 [(validator.field) = {regex: "^.{1,225}$"}];
}

message GetRegexResponse {
    map<string, UserDetail> users= 1;
}

message DeleteRequest {
    repeated string emails =1;
}

message DeleteResponse {}

message PingRequest {}

message PingResponse {
    bool ok =1;
}

message NewAccountRequest {
    string name =1 [(validator.field) = {regex: "^.{1,225}$"}];
    string admin_email =2 [(validator.field) = {regex: "^.{1,225}$"}];
    map<string, string> metadata =3; //optional metadata associated with the user
}

message NewAccountResponse {
    Account account =1;
}

message GetAccountRequest {
    repeated string names =1;
}

message GetAccountResponse {
    map<string, Account> accounts = 1;
}
message GetAccountRegexRequest {
    string regex = 1 [(validator.field) = {regex: "^.{1,225}$"}];
}
message GetAccountRegexResponse {
    map<string, Account> accounts= 1;
}

message SetAccountPlanRequest {
    string account_name =1 [(validator.field) = {regex: "^.{1,225}$"}];
    string plan =2 [(validator.field) = {regex: "^.{1,225}$"}];
}

message SetAccountPlanResponse {
    Account account =1;
}


message SetAccountSourceRequest {
    string account_name =1 [(validator.field) = {regex: "^.{1,225}$"}];
    string source =2 [(validator.field) = {regex: "^.{1,225}$"}];
}

message SetAccountSourceResponse {
    Account account =1;
}

message DeleteAccountRequest {
    repeated string names =1;
}

message DeleteAccountResponse {}

message GetAccountNamesRequest {}

message GetAccountNamesResponse {
    repeated string names =1;
}

message GetAccountNamesRegexRequest {
    string regex =1 [(validator.field) = {regex: "^.{1,225}$"}];
}

message GetAccountNamesRegexResponse {
    repeated string names =1;
}

message SetUserAccountRequest {
    string user_email =1 [(validator.field) = {regex: "^.{1,225}$"}];
    string account_name =2 [(validator.field) = {regex: "^.{1,225}$"}];
}

message SetUserAccountResponse {
    UserDetail user =1;
}

message IncAccountPlanUsageRequest {
    int64 increment =1 [(validator.field) = {int_gt : 0}];
    string account_name =2 [(validator.field) = {regex: "^.{1,225}$"}];
    string plan =3 [(validator.field) = {regex: "^.{1,225}$"}];
}

message IncAccountPlanUsageResponse {
}