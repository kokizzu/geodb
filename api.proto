syntax = "proto3";

package api;

option go_package = "api";
import "github.com/mwitkow/go-proto-validators/validator.proto";

service UserDB {
    //Ping - input: empty, output: returns ok if server is healthy.
    rpc Ping(PingRequest) returns(PingResponse){};
    //Set - input: an user output: an user detail. User details are enhanced when the google maps integration is active
    rpc Set(SetRequest) returns(SetResponse){};
    //Get - input: an array of user emails, output: returns an array of current user details
    rpc Get(GetRequest) returns(GetResponse){};
    //GetRegex - input: a regex string, output: returns an array of current user details with emails that match the regex pattern
    rpc GetRegex(GetRegexRequest) returns(GetRegexResponse){};
    //GetEmails -  input: none, output: returns all emails in database
    rpc GetEmails(GetEmailsRequest) returns(GetEmailsResponse){};
    //GetRegexEmails -  input: a regex string, output: returns all emails in database that match the regex pattern
    rpc GetRegexEmails(GetRegexEmailsRequest) returns(GetRegexEmailsResponse){};
    //Delete -  input: an array of user email strings to delete, output: none
    rpc Delete(DeleteRequest) returns(DeleteResponse){};
    //Stream -  input: a clientID(optional) and an array of user emails(optional),
    //output: a stream of user details for realtime, targetted user geolocation updates
    rpc Stream(StreamRequest) returns(stream StreamResponse){};
    //StreamRegex -  input: a clientID(optional) a regex string,
    //output: a stream of user details for realtime, targetted user geolocation updates that match the regex pattern
    rpc StreamRegex(StreamRegexRequest) returns(stream StreamRegexResponse){};
}

message User {
    string email = 1 [(validator.field) = {regex: "^.{1,225}$"}];
    string name = 2 [(validator.field) = {regex: "^.{1,225}$"}];
    map<string, string> metadata =4; //optional metadata associated with the user
    int64 expires_unix =5; //a unix timestamp in the future when the database should clean up the user. empty if no expiration.
}

//UserDetail is an enhanced view of an User containing a human readable address and the users latest tracking information
message UserDetail {
    User user =1;
    Payment payment =2;
    int64 updated_unix =3; //unix timestamp representing last update (optional)
}


message Payment {
    string customer_id =1;
}

message StreamRequest {
    string client_id =1;
    repeated string emails =2;
}

message StreamResponse {
    UserDetail user =1;
}

message StreamRegexRequest {
    string client_id =1;
    string regex =2 [(validator.field) = {regex: "^.{1,225}$"}];
}

message StreamRegexResponse {
    UserDetail user =1;
}

message StreamPrefixResponse {
    UserDetail user =1;
}

message SetRequest {
    User user =1 [(validator.field) = {msg_exists : true}];
}

message SetResponse {
    UserDetail user= 1;
}

message GetEmailsRequest {}

message GetEmailsResponse {
    repeated string emails =1;
}

message GetRegexEmailsRequest {
    string regex =1 [(validator.field) = {regex: "^.{1,225}$"}];
}

message GetRegexEmailsResponse {
    repeated string emails =1;
}

message GetRequest {
    repeated string emails =1;
}

message GetResponse {
    map<string, UserDetail> users= 1;
}

message GetRegexRequest {
    string regex =1 [(validator.field) = {regex: "^.{1,225}$"}];
}

message GetRegexResponse {
    map<string, UserDetail> users= 1;
}

message DeleteRequest {
    repeated string emails =1;
}

message DeleteResponse {}

message PingRequest {}

message PingResponse {
    bool ok =1;
}